// Coded on 13-11-2022

/*
Based on the discussed quick sort algorithm, Find the position of an element in the sorted array.

For example:

if an unsorted array has 6 elements and the array has [10, 5, 6, 12, 19, 16], your task is to find any prescribed element's position in the sorted array.

if the prescribed element is 6 then you have to print "2" as its position in the sorted array.

Do this task without sorting the entire array.
*/

#include <iostream>
using namespace std;

void swap(int* a, int* b)
{
	int t = *a;
	*a = *b;
	*b = t;
}

int partition(int arr[], int low, int high)
{
	int pivot = arr[high]; 
	int i= (low- 1); 
	for (int j = low; j <= high - 1; j++) {
		if (arr[j] < pivot) {
			i++; 
			swap(&arr[i], &arr[j]);
		}
	}
	swap(&arr[i + 1], &arr[high]);
	return (i + 1);
}

void quickSort(int arr[], int low, int high)
{
	if (low < high) {
		int pi = partition(arr, low, high);
		quickSort(arr, low, pi - 1);
		quickSort(arr, pi + 1, high);
	}
}

int main()
{
    int n;
    cin>>n;
	int arr[n];
	for(int i=0; i<n; i++){
	    cin>>arr[i];
	}
	quickSort(arr, 0, n - 1);
	int x;
	cin>>x;
	for(int i=0; i<n; i++){
	    if(arr[i]==x){
	        cout<<i+1<<" ";
	    }
	}
	return 0;
}
